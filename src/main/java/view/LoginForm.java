package view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import connection.DBConnection;
import connection.Queries;
import view.rolepanels.AdminForm;
import view.rolepanels.ManagerForm;
import view.rolepanels.VetForm;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.sql.SQLException;
import java.util.Locale;
import java.util.Map;

public class LoginForm extends JFrame {
    private JPanel mainPanel;
    private JTextField addressText;
    private JTextField loginText;
    private JLabel addressLabel;
    private JLabel loginLabel;
    private JLabel passwordLabel;
    private JPasswordField passwordField;
    private JButton connectButton;
    private JRadioButton defaultSettingButton;
    private JTextField schemaText;
    private JLabel schemaLabel;
    private JLabel loginInfo;
    private JButton helpButton;
    private final Map<MainForm.Settings, String> settingsMap;
    private final MainForm mainForm;
    private final JFrame helpForm;

    public LoginForm(Map<MainForm.Settings, String> settingsMap, MainForm mainForm) {
        this.setTitle("Подключиться к БД");
        this.mainForm = mainForm;
        this.helpForm = new HelpForm();
        this.settingsMap = settingsMap;
        this.setContentPane(mainPanel);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        initButtonsListeners();
        initDefaultSettings();
        this.pack();
    }

    private void initButtonsListeners() {
        helpButton.addActionListener(actionEvent -> {
            FrameLocation.centerFrameLocation(helpForm);
            helpForm.setVisible(true);
        });

        connectButton.addActionListener(e -> {
            if (!"".equals(addressText.getText())) {
                settingsMap.put(MainForm.Settings.ADDRESS, addressText.getText());
            }
            if (!"".equals(loginText.getText())) {
                settingsMap.put(MainForm.Settings.LOGIN, loginText.getText());
            }
            if (!"".equals(schemaText.getText())) {
                settingsMap.put(MainForm.Settings.SCHEMA, schemaText.getText());
            }
            String pass = String.valueOf(passwordField.getPassword());
            settingsMap.put(MainForm.Settings.PASSWORD, pass);

            try {
                DBConnection.connect(settingsMap);
                openRolePanel();
                this.dispose();
                this.mainForm.setVisible(true);
            } catch (SQLException ex) {
                MainForm.displayError(ex);
            }
        });
    }

    private void openRolePanel() {
        String role = Queries.getUserRole(settingsMap.get(MainForm.Settings.LOGIN));
        if ("zoo_manager".equalsIgnoreCase(role)) {
            mainForm.addNewTab("Менеджер", new ManagerForm(mainForm));
        } else if ("zoo_vet".equalsIgnoreCase(role)) {
            mainForm.addNewTab("Ветеринар", new VetForm(mainForm));
        } else {
            mainForm.loadDataButton.setVisible(true);
            mainForm.tablesToolBar.setVisible(true);
            mainForm.addNewTab("Администратор", new AdminForm(mainForm));
        }
    }

    private void initDefaultSettings() {

//        vetButton.addActionListener(e -> {
//            loginText.setText("test_vet");
//            passwordField.setText("pass");
//        });
//
//        managerButton.addActionListener(e -> {
//            loginText.setText("test_manager");
//            passwordField.setText("pass");
//        });


        defaultSettingButton.addActionListener(e -> {
            addressText.setText("84.237.50.81:1521:XE");
            schemaText.setText("18205_Kriger");
            loginText.setText("18205_Kriger");
            passwordField.setText("hpdesckjet5150");
        });
        defaultSettingButton.doClick();
        defaultSettingButton.setVisible(false);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(6, 3, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setBackground(new Color(-2359335));
        mainPanel.setForeground(new Color(-16730829));
        mainPanel.setMinimumSize(new Dimension(700, 250));
        mainPanel.setPreferredSize(new Dimension(700, 250));
        addressText = new JTextField();
        addressText.setBackground(new Color(-2359335));
        Font addressTextFont = this.$$$getFont$$$("Comic Sans MS", -1, 18, addressText.getFont());
        if (addressTextFont != null) addressText.setFont(addressTextFont);
        addressText.setForeground(new Color(-16730829));
        mainPanel.add(addressText, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        addressLabel = new JLabel();
        addressLabel.setBackground(new Color(-5638753));
        Font addressLabelFont = this.$$$getFont$$$("Comic Sans MS", -1, 18, addressLabel.getFont());
        if (addressLabelFont != null) addressLabel.setFont(addressLabelFont);
        addressLabel.setForeground(new Color(-16730829));
        addressLabel.setText("Адрес базы данных");
        mainPanel.add(addressLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(109, 16), null, 0, false));
        loginText = new JTextField();
        loginText.setBackground(new Color(-2359335));
        Font loginTextFont = this.$$$getFont$$$("Comic Sans MS", -1, 18, loginText.getFont());
        if (loginTextFont != null) loginText.setFont(loginTextFont);
        loginText.setForeground(new Color(-16730829));
        mainPanel.add(loginText, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        loginLabel = new JLabel();
        loginLabel.setBackground(new Color(-5638753));
        Font loginLabelFont = this.$$$getFont$$$("Comic Sans MS", -1, 18, loginLabel.getFont());
        if (loginLabelFont != null) loginLabel.setFont(loginLabelFont);
        loginLabel.setForeground(new Color(-16730829));
        loginLabel.setText("Логин");
        mainPanel.add(loginLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordLabel = new JLabel();
        passwordLabel.setBackground(new Color(-5638753));
        Font passwordLabelFont = this.$$$getFont$$$("Comic Sans MS", -1, 18, passwordLabel.getFont());
        if (passwordLabelFont != null) passwordLabel.setFont(passwordLabelFont);
        passwordLabel.setForeground(new Color(-16730829));
        passwordLabel.setText("Пароль");
        mainPanel.add(passwordLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordField = new JPasswordField();
        passwordField.setBackground(new Color(-2359335));
        Font passwordFieldFont = this.$$$getFont$$$("Comic Sans MS", -1, 18, passwordField.getFont());
        if (passwordFieldFont != null) passwordField.setFont(passwordFieldFont);
        passwordField.setForeground(new Color(-16730829));
        mainPanel.add(passwordField, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        connectButton = new JButton();
        connectButton.setBackground(new Color(-16730829));
        Font connectButtonFont = this.$$$getFont$$$("Comic Sans MS", -1, 18, connectButton.getFont());
        if (connectButtonFont != null) connectButton.setFont(connectButtonFont);
        connectButton.setForeground(new Color(-2359335));
        connectButton.setText("Подключиться");
        mainPanel.add(connectButton, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        schemaLabel = new JLabel();
        schemaLabel.setBackground(new Color(-5638753));
        Font schemaLabelFont = this.$$$getFont$$$("Comic Sans MS", -1, 18, schemaLabel.getFont());
        if (schemaLabelFont != null) schemaLabel.setFont(schemaLabelFont);
        schemaLabel.setForeground(new Color(-16730829));
        schemaLabel.setText("Название схемы");
        mainPanel.add(schemaLabel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        schemaText = new JTextField();
        schemaText.setBackground(new Color(-2359335));
        Font schemaTextFont = this.$$$getFont$$$("Comic Sans MS", -1, 18, schemaText.getFont());
        if (schemaTextFont != null) schemaText.setFont(schemaTextFont);
        schemaText.setForeground(new Color(-16730829));
        mainPanel.add(schemaText, new GridConstraints(4, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        loginInfo = new JLabel();
        loginInfo.setBackground(new Color(-5638753));
        Font loginInfoFont = this.$$$getFont$$$("Comic Sans MS", Font.BOLD, 18, loginInfo.getFont());
        if (loginInfoFont != null) loginInfo.setFont(loginInfoFont);
        loginInfo.setForeground(new Color(-16730829));
        loginInfo.setText("Для входа введите свои данные, пожалуйста:");
        mainPanel.add(loginInfo, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        defaultSettingButton = new JRadioButton();
        defaultSettingButton.setBackground(new Color(-5638753));
        Font defaultSettingButtonFont = this.$$$getFont$$$("Comic Sans MS", -1, 18, defaultSettingButton.getFont());
        if (defaultSettingButtonFont != null) defaultSettingButton.setFont(defaultSettingButtonFont);
        defaultSettingButton.setForeground(new Color(-16730829));
        defaultSettingButton.setText("default settings");
        mainPanel.add(defaultSettingButton, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        helpButton = new JButton();
        helpButton.setText("Помощь");
        mainPanel.add(helpButton, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
