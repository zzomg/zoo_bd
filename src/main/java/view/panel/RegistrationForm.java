package view.panel;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import connection.DBConnection;
import entities.User;
import view.MainForm;

import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

public class RegistrationForm extends JPanel {
    private JPanel mainPanel;
    private JTextField usernameText;
    private JLabel usernameLabel;
    private JLabel passwordLabel;
    private JPasswordField passwordField;
    private JButton registerButton;
    private JComboBox<String> roleBox;
    private JLabel roleLabel;
    private final Map<String, String> roleMap = new HashMap<>();


    public RegistrationForm() {
        this.add(mainPanel);
        initRoleMap();
        initButtons();
    }

    private void initRoleMap() {
        roleMap.put("Ветеринар", "zoo_vet");
        roleMap.put("Менеджер", "zoo_manager");
    }

    private void initButtons() {
        registerButton.addActionListener(e -> {
            if (roleBox.getSelectedIndex() == 0) {
                MainForm.displaySuccess("Выберите роль");
                return;
            }
            Connection dbConn = DBConnection.getConn();
            try {
                new User(usernameText.getText(),
                        roleMap.get(
                                Objects.requireNonNull(roleBox.getSelectedItem()).toString())
                ).insertValues();
                createUser(dbConn);
                dbConn.commit();
                MainForm.displaySuccess("Пользователь создан!");
            } catch (SQLException ex) {
                ex.printStackTrace();
                try {
                    dbConn.rollback();
                    MainForm.displayError(ex);
                } catch (SQLException throwables) {
                    throwables.printStackTrace();
                }
            }
        });
    }

    private void createUser(Connection dbConn) throws SQLException {
        Statement statement;
        String str = String.format("CREATE USER %s IDENTIFIED BY %s",
                usernameText.getText(), String.valueOf(passwordField.getPassword()));
        statement = dbConn.createStatement();
        statement.execute(str);

        str = String.format("GRANT %s TO %s",
                roleMap.get(Objects.requireNonNull(roleBox.getSelectedItem()).toString()),
                usernameText.getText());
        statement = dbConn.createStatement();
        statement.execute(str);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        usernameLabel = new JLabel();
        usernameLabel.setText("Username");
        mainPanel.add(usernameLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        usernameText = new JTextField();
        mainPanel.add(usernameText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        passwordLabel = new JLabel();
        passwordLabel.setText("Пароль");
        mainPanel.add(passwordLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordField = new JPasswordField();
        mainPanel.add(passwordField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        registerButton = new JButton();
        registerButton.setText("Зарегистрировать");
        mainPanel.add(registerButton, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        roleBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("");
        defaultComboBoxModel1.addElement("Ветеринар");
        defaultComboBoxModel1.addElement("Менеджер");
        roleBox.setModel(defaultComboBoxModel1);
        mainPanel.add(roleBox, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        roleLabel = new JLabel();
        roleLabel.setText("Роль");
        mainPanel.add(roleLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
