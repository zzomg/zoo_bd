package view.filters;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import connection.Queries;
import view.FrameLocation;
import view.tables.TableViewForm;

import javax.swing.*;
import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Objects;

public class AnimalCardFilterForm extends JFrame {
    private JPanel mainPanel;
    private JLabel animalTypeLabel;
    private JComboBox<String> animalTypeBox;
    private JLabel cageLabel;
    private JLabel sexLabel;
    private JLabel birthLabel;
    private JLabel heightLabel;
    private JLabel weightLabel;
    private JComboBox<String> cageBox;
    private JComboBox<String> sexBox;
    private JCheckBox warmCageCheck;
    private JButton acceptButton;
    private JTextField fromHeightText;
    private JTextField fromWeightText;
    private JFormattedTextField fromBirthDateText;
    private JFormattedTextField toBirthDateText;
    private JLabel fromDate;
    private JRadioButton birthDateButton;
    private JLabel fromHeightLabel;
    private JLabel toHeightLabel;
    private JTextField toHeightText;
    private JLabel fromWeightLabel;
    private JLabel toWeightLabel;
    private JTextField toWeightText;
    private JCheckBox notWarmCageCheck;
    private final TableViewForm tableView;

    public AnimalCardFilterForm(TableViewForm tableView) {
        this.tableView = tableView;
        $$$setupUI$$$();
        this.setTitle("Фильтрация особей");
        this.setContentPane(mainPanel);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        initComboBox();
        initButtons();
        this.pack();
        FrameLocation.centerFrameLocation(this);
    }

    private void initButtons() {
        acceptButton.addActionListener(e -> acceptFilter());
    }

    private void initComboBox() {
        DefaultComboBoxModel<String> defaultComboBoxModel = new DefaultComboBoxModel<>();
        defaultComboBoxModel.addElement("Все");
        for (String name : Queries.getAnimalNames()) {
            defaultComboBoxModel.addElement(name);
        }
        animalTypeBox.setModel(defaultComboBoxModel);

        defaultComboBoxModel = new DefaultComboBoxModel<>();
        defaultComboBoxModel.addElement("Все");
        for (String number : Queries.getCageNumbers()) {
            defaultComboBoxModel.addElement(number);
        }
        cageBox.setModel(defaultComboBoxModel);
    }

    private void acceptFilter() {
        String whereClause = " where 1=1 ";

        if (!"Все".equalsIgnoreCase(Objects.requireNonNull(animalTypeBox.getSelectedItem()).toString())) {
            whereClause += " and animal_name = '"
                    + Objects.requireNonNull(animalTypeBox.getSelectedItem()).toString() + "'";
        }

        if (!"Все".equalsIgnoreCase(Objects.requireNonNull(cageBox.getSelectedItem()).toString())) {
            whereClause += " and cage_number = "
                    + Objects.requireNonNull(cageBox.getSelectedItem()).toString();
        }
        if (!"Все".equalsIgnoreCase(Objects.requireNonNull(sexBox.getSelectedItem()).toString())) {
            whereClause += " and sex = '"
                    + Objects.requireNonNull(sexBox.getSelectedItem()).toString().toLowerCase() + "'";
        }
        if (!birthDateButton.isSelected()) {
            whereClause += " and birth_date between to_date('"
                    + fromBirthDateText.getText() + "', 'YYYY-MM-DD')"
                    + " and to_date('" + toBirthDateText.getText() + "', 'YYYY-MM-DD')";
        }
        if (!fromHeightText.getText().isEmpty()) {
            whereClause += " and height >= " + fromHeightText.getText();
        }
        if (!toHeightText.getText().isEmpty()) {
            whereClause += " and height <= " + toHeightText.getText();
        }
        if (!fromWeightText.getText().isEmpty()) {
            whereClause += " and weight >= " + fromWeightText.getText();
        }
        if (!toWeightText.getText().isEmpty()) {
            whereClause += " and weight <= " + toWeightText.getText();
        }

        if (!((warmCageCheck.isSelected()) && (notWarmCageCheck.isSelected()))) {
            if (notWarmCageCheck.isSelected()) {
                whereClause += " and req_warm_cage = 0";
            } else {
                whereClause += " and req_warm_cage = 1";
            }
        }

        tableView.filterTable(whereClause);
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(8, 3, new Insets(0, 0, 0, 0), -1, -1));
        animalTypeLabel = new JLabel();
        animalTypeLabel.setText("Вид животного");
        mainPanel.add(animalTypeLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cageLabel = new JLabel();
        cageLabel.setText("Клетка");
        mainPanel.add(cageLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sexLabel = new JLabel();
        sexLabel.setText("Пол");
        mainPanel.add(sexLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        birthLabel = new JLabel();
        birthLabel.setText("Дата рождения");
        mainPanel.add(birthLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        heightLabel = new JLabel();
        heightLabel.setText("Рост (длина), см");
        mainPanel.add(heightLabel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        weightLabel = new JLabel();
        weightLabel.setText("Вес, кг");
        mainPanel.add(weightLabel, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sexBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Все");
        defaultComboBoxModel1.addElement("Самец");
        defaultComboBoxModel1.addElement("Самка");
        sexBox.setModel(defaultComboBoxModel1);
        mainPanel.add(sexBox, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        acceptButton = new JButton();
        acceptButton.setText("Применить фильтр");
        mainPanel.add(acceptButton, new GridConstraints(7, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        warmCageCheck = new JCheckBox();
        warmCageCheck.setSelected(true);
        warmCageCheck.setText("Требует теплое помещение");
        mainPanel.add(warmCageCheck, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cageBox = new JComboBox();
        mainPanel.add(cageBox, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        animalTypeBox = new JComboBox();
        mainPanel.add(animalTypeBox, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.add(fromBirthDateText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        panel1.add(toBirthDateText, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        fromDate = new JLabel();
        fromDate.setText("С:");
        panel1.add(fromDate, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("До:");
        panel1.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        birthDateButton = new JRadioButton();
        birthDateButton.setSelected(true);
        birthDateButton.setText("Любая дата");
        panel1.add(birthDateButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel2, new GridConstraints(4, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        fromHeightText = new JTextField();
        fromHeightText.setText("");
        panel2.add(fromHeightText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        fromHeightLabel = new JLabel();
        fromHeightLabel.setText("От");
        panel2.add(fromHeightLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        toHeightLabel = new JLabel();
        toHeightLabel.setText("До");
        panel2.add(toHeightLabel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        toHeightText = new JTextField();
        panel2.add(toHeightText, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel3, new GridConstraints(5, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        fromWeightText = new JTextField();
        fromWeightText.setText("");
        panel3.add(fromWeightText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        fromWeightLabel = new JLabel();
        fromWeightLabel.setText("От");
        panel3.add(fromWeightLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        toWeightLabel = new JLabel();
        toWeightLabel.setText("До");
        panel3.add(toWeightLabel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        toWeightText = new JTextField();
        panel3.add(toWeightText, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        notWarmCageCheck = new JCheckBox();
        notWarmCageCheck.setSelected(true);
        notWarmCageCheck.setText("Не требует теплое помещение");
        mainPanel.add(notWarmCageCheck, new GridConstraints(6, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private void createUIComponents() {
        fromBirthDateText = new JFormattedTextField(new SimpleDateFormat("yyyy-MM-dd"));
        fromBirthDateText.setValue(new Date(0));

        toBirthDateText = new JFormattedTextField(new SimpleDateFormat("yyyy-MM-dd"));
        toBirthDateText.setValue(new Date());
    }
}
