package forms.tables;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import server.Queries;
import entities.AnimalCard;
import entities.Entity;
import forms.filters.AnimalCardFilterForm;

import javax.swing.*;
import java.awt.*;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Objects;

public class AnimalCardForm extends JPanel implements NewEntityPanel {
    private JLabel sexLabel;
    private JLabel birthDateLabel;
    private JLabel CageNumberLabel;
    private JLabel animalIdLabel;
    private JTextField cageNumberText;
    private JComboBox<String> sexBox;
    private JFormattedTextField birthDateText;
    private JPanel mainPanel;
    private JTextField weightText;
    private JTextField heightText;
    private JLabel weightLabel;
    private JLabel heightLabel;
    private JFormattedTextField admissionDateText;
    private JLabel admissionDateLabel;
    private JCheckBox illCheck;
    private JCheckBox isolatedCheck;
    private JComboBox<String> animalNameBox;
    private AnimalCardFilterForm filterForm;

    public AnimalCardForm() {
        $$$setupUI$$$();

        this.add(mainPanel);
        this.setVisible(true);
    }

    private void createUIComponents() {
        // place custom component creation code here
        birthDateText = new JFormattedTextField(new SimpleDateFormat("yyyy-MM-dd"));
        birthDateText.setValue(new Date());

        admissionDateText = new JFormattedTextField(new SimpleDateFormat("yyyy-MM-dd"));
        admissionDateText.setValue(new Date());

        animalNameBox = new JComboBox<>();
        final DefaultComboBoxModel<String> defaultComboBoxModel = new DefaultComboBoxModel<>();
        for (String name : Queries.getAnimalNames()) {
            defaultComboBoxModel.addElement(name);
        }
        animalNameBox.setModel(defaultComboBoxModel);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(8, 3, new Insets(0, 0, 0, 0), -1, -1));
        sexLabel = new JLabel();
        sexLabel.setText("Пол");
        mainPanel.add(sexLabel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CageNumberLabel = new JLabel();
        CageNumberLabel.setText("Номер клетки");
        mainPanel.add(CageNumberLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        animalIdLabel = new JLabel();
        animalIdLabel.setText("Название животного");
        mainPanel.add(animalIdLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cageNumberText = new JTextField();
        mainPanel.add(cageNumberText, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sexBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Самец");
        defaultComboBoxModel1.addElement("Самка");
        sexBox.setModel(defaultComboBoxModel1);
        mainPanel.add(sexBox, new GridConstraints(4, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        weightLabel = new JLabel();
        weightLabel.setText("Вес");
        mainPanel.add(weightLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        heightLabel = new JLabel();
        heightLabel.setText("Длина");
        mainPanel.add(heightLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        weightText = new JTextField();
        mainPanel.add(weightText, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        heightText = new JTextField();
        mainPanel.add(heightText, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        birthDateLabel = new JLabel();
        birthDateLabel.setText("Дата рождения");
        mainPanel.add(birthDateLabel, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        birthDateText.setFocusLostBehavior(1);
        mainPanel.add(birthDateText, new GridConstraints(5, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        admissionDateLabel = new JLabel();
        admissionDateLabel.setText("Дата поступления в зоопарк");
        mainPanel.add(admissionDateLabel, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mainPanel.add(admissionDateText, new GridConstraints(6, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        mainPanel.add(animalNameBox, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(7, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        illCheck = new JCheckBox();
        illCheck.setText("Больное");
        panel1.add(illCheck, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        isolatedCheck = new JCheckBox();
        isolatedCheck.setText("Изолированное");
        panel1.add(isolatedCheck, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    @Override
    public Entity getEntity() throws IllegalArgumentException, SQLException {
        int cageNumber = Integer.parseInt(cageNumberText.getText().trim());
        String animalName = Objects.requireNonNull(animalNameBox.getSelectedItem()).toString();
        if (!checkCage(cageNumber, animalName)) {
            throw new SQLException("Нельзя селить несовместимых животных рядом");
        }

        return new AnimalCard(
                animalName,
                cageNumber,
                Integer.parseInt(weightText.getText().trim()),
                Integer.parseInt(heightText.getText().trim()),
                Objects.requireNonNull(sexBox.getSelectedItem()).toString().toLowerCase(),
                birthDateText.getText(),
                admissionDateText.getText(),
                illCheck.isSelected() ? 1 : 0,
                isolatedCheck.isSelected() ? 1 : 0
        );
    }

    private boolean checkCage(int cageNumber, String animalName) {
        String[] neighborsAnimals = Queries.getNeighborsAnimalNames(cageNumber);
        System.out.println(Arrays.toString(neighborsAnimals));
        String[] nonCompatibleAnimals = Queries.getNonCompatibleAnimals(animalName);
        System.out.println(Arrays.toString(nonCompatibleAnimals));
        for (String neighbor : neighborsAnimals) {
            for (String nonCompAnimal : nonCompatibleAnimals) {
                if (neighbor.equalsIgnoreCase(nonCompAnimal)) {
                    return false;
                }
            }
        }
        return true;
    }

    @Override
    public void initFilterForm(TableViewForm tableView) {
        filterForm = new AnimalCardFilterForm(tableView);
    }

    @Override
    public JFrame getFilterForm() {
        return filterForm;
    }

    @Override
    public void insertEntity() throws SQLException {
        getEntity().insertValues();
    }
}
