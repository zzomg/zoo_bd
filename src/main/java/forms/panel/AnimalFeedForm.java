package forms.panel;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import server.DBConnection;
import server.Queries;
import forms.MainForm;
import forms.tables.AnimalCardFeedForm;
import forms.tables.ImplTableModel;
import forms.tables.TableUtils;

import javax.sql.RowSetEvent;
import javax.sql.RowSetListener;
import javax.sql.rowset.CachedRowSet;
import javax.swing.*;
import java.awt.*;
import java.sql.SQLException;
import java.util.Objects;

public class AnimalFeedForm extends JPanel implements RowSetListener {
    private JPanel mainPanel;
    private JComboBox<String> animalCardBox;
    private JTable feedTable;
    private JButton addFeedButton;
    private JButton updateButton;
    private JButton deleteButton;
    private JPanel buttonPanel;
    private JScrollPane scrollPane;
    private ImplTableModel model;
    private final MainForm mainForm;

    public AnimalFeedForm(MainForm mainForm) {
        this.mainForm = mainForm;
        $$$setupUI$$$();

        initComboBox();
        initTable();
        initButtons();
        this.add(mainPanel);
        this.setVisible(true);
    }

    private void initComboBox() {
        DefaultComboBoxModel<String> boxModel = new DefaultComboBoxModel<>();
        for (String card : Queries.getAnimalCards()) {
            boxModel.addElement(card);
        }
        animalCardBox.setModel(boxModel);

        animalCardBox.addActionListener(e -> initTable());
    }

    private void initButtons() {
        addFeedButton.addActionListener(e -> {
            AnimalCardFeedForm animalCardFeedForm = new AnimalCardFeedForm(animalCardBox.getSelectedIndex());
            mainForm.addNewTab("Добавить питание", animalCardFeedForm);
        });

        updateButton.addActionListener(e -> {
            if (model == null) {
                return;
            }
            try {
                model.getTableRowSet().acceptChanges(DBConnection.getConn());
                model.getTableRowSet().commit();
            } catch (SQLException sqle) {
                sqle.printStackTrace();
                MainForm.displayError(sqle);
            } finally {
                initTable();
            }
        });

        deleteButton.addActionListener(e -> {
            if (model == null) {
                return;
            }
            try {
                int row;
                if ((row = feedTable.getSelectedRow()) != -1) {
                    model.getTableRowSet().absolute(row + 1);
                    model.getTableRowSet().deleteRow();
                    feedTable.repaint();
                    feedTable.clearSelection();
                }
            } catch (SQLException throwables) {
                MainForm.displayError(throwables);
            }
        });
    }

    private void initTable() {
        try {
            String animalCard = Objects.requireNonNull(animalCardBox.getSelectedItem()).toString();
            String[] splittedCard = animalCard.split("\\s+");
            String whereClause = "where card_id = " + splittedCard[0] + " order by FEED_TIME";

            CachedRowSet cachedRowSet =
                    TableUtils.getContentsOfTableWithCondition("Animal_card_feed", whereClause);
            model = new ImplTableModel(cachedRowSet, new Integer[]{0, 1, 2, 3});
            model.addEventHandlersToRowSet(this);
            feedTable.getTableHeader().setReorderingAllowed(false);
            feedTable.setModel(model);
            feedTable.removeColumn(feedTable.getColumn("CARD_ID"));
        } catch (SQLException e) {
            MainForm.displayError(e);
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        animalCardBox = new JComboBox();
        mainPanel.add(animalCardBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(buttonPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        addFeedButton = new JButton();
        addFeedButton.setText("Добавить питание");
        buttonPanel.add(addFeedButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        updateButton = new JButton();
        updateButton.setText("Обновить");
        buttonPanel.add(updateButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteButton = new JButton();
        deleteButton.setText("Удалить питание");
        buttonPanel.add(deleteButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scrollPane = new JScrollPane();
        mainPanel.add(scrollPane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        feedTable = new JTable();
        scrollPane.setViewportView(feedTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    @Override
    public void rowSetChanged(RowSetEvent event) {

    }

    @Override
    public void rowChanged(RowSetEvent event) {
        if (model == null) {
            return;
        }
        CachedRowSet currentRowSet = this.model.getTableRowSet();
        try {
            currentRowSet.moveToCurrentRow();
            model.setTableRowSet(model.getTableRowSet());
            feedTable.setModel(model);
        } catch (SQLException ex) {
            MainForm.displayError(ex);
        }
    }

    @Override
    public void cursorMoved(RowSetEvent event) {

    }
}
